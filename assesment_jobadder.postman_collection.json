{
	"info": {
		"_postman_id": "ed087719-f9db-4094-88f6-71eeec282de5",
		"name": "Assessment_jobadder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4955229"
	},
	"item": [
		{
			"name": "lat_lon_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" const responseData = pm.response.json(); ",
							"",
							"pm.test(\"verify data is returned for correct lat/lon\", function () {",
							" ",
							"  ",
							"     pm.expect(responseData.lat).to.equal(pm.variables.get(\"lat\"))",
							"     pm.expect(responseData.lon).to.equal(pm.variables.get(\"lon\"))",
							"});",
							"",
							"",
							"",
							" pm.test(\"Response has the required fields\", function () {",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('city_name');",
							"    pm.expect(responseData).to.have.property('country_code');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('lat');",
							"    pm.expect(responseData).to.have.property('lon');",
							"    pm.expect(responseData).to.have.property('state_code');",
							"    pm.expect(responseData).to.have.property('timezone');",
							"});",
							"",
							"",
							"pm.test(\"Data array and its elements are valid\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function(element) {",
							"        pm.expect(element).to.have.property('app_temp');",
							"        pm.expect(element).to.have.property('clouds');",
							"        pm.expect(element).to.have.property('datetime');",
							"        pm.expect(element).to.have.property('temp');",
							"        pm.expect(element).to.have.property('weather');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "5875405f2b4148e3bf07050715b28f76",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.weatherbit.io/v2.0/forecast/hourly?lat={{lat}}&lon={{lon}}",
					"protocol": "https",
					"host": [
						"api",
						"weatherbit",
						"io"
					],
					"path": [
						"v2.0",
						"forecast",
						"hourly"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "postal_code",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "postal_code_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" const responseData = pm.response.json(); ",
							"",
							"",
							"",
							"",
							" pm.test(\"Response has the required fields\", function () {",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('city_name');",
							"    pm.expect(responseData).to.have.property('country_code');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('lat');",
							"    pm.expect(responseData).to.have.property('lon');",
							"    pm.expect(responseData).to.have.property('state_code');",
							"    pm.expect(responseData).to.have.property('timezone');",
							"});",
							"",
							"",
							"pm.test(\"Data array and its elements are valid\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function(element) {",
							"        pm.expect(element).to.have.property('app_temp');",
							"        pm.expect(element).to.have.property('clouds');",
							"        pm.expect(element).to.have.property('datetime');",
							"        pm.expect(element).to.have.property('temp');",
							"        pm.expect(element).to.have.property('weather');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "5875405f2b4148e3bf07050715b28f76",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.weatherbit.io/v2.0/forecast/hourly?postal_code={{postal_code}}",
					"protocol": "https",
					"host": [
						"api",
						"weatherbit",
						"io"
					],
					"path": [
						"v2.0",
						"forecast",
						"hourly"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}",
							"disabled": true
						},
						{
							"key": "lon",
							"value": "{{lon}}",
							"disabled": true
						},
						{
							"key": "postal_code",
							"value": "{{postal_code}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response should not have any errors\", function () {",
					"    pm.response.to.not.have.jsonBody(\"errors\");",
					"    pm.response.to.not.be.error;",
					"});"
				]
			}
		}
	]
}